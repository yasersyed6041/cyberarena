from flask import Blueprint, render_template, request, redirect, session
from google.cloud import datastore
from utilities.vulnerabilities import get_vulnerability, assess_response, get_score_image, LEVEL1_POINTS, LEVEL2_POINTS
from utilities.sample_systems import sample_systems

vulnerability_defender = Blueprint("vulnerability_defender", __name__, static_folder="static",
                                   template_folder="template", url_prefix="/app")

ds_client = datastore.Client()


@vulnerability_defender.route('/<workout_id>', methods=['GET', 'POST'])
def app_entry(workout_id):
    workout = ds_client.get(ds_client.key('cybergym-workout', workout_id))
    if not workout:
        return render_template('invalid_workout.html')

    workout_level = 'advanced'
    page_template = 'advanced-risk-workout.html'

    if request.method == 'POST':
        selected_system = request.form['system']
        workout['assessment']['response'] = {
            'points': 0,
            'complete': False,
            'company': request.form['company'],
            'mission': request.form['mission'],
            'system': sample_systems[selected_system]["name"],
            'system_id': selected_system,
            'service': request.form.get('service', None),
            'service_impact': request.form.get('service-impact', None),
            'confidentiality_scenario': request.form.get('confidentiality-scenario', None),
            'confidentiality_impact': request.form['confidentiality-impact'],
            'integrity_scenario': request.form.get('integrity-scenario', None),
            'integrity_impact': request.form['integrity-impact'],
            'availability_scenario': request.form.get('availability-scenario', None),
            'availability_impact': request.form['availability-impact'],
            'vulnerabilities': {}
        }
        ds_client.put(workout)
        return redirect(f'/app/get-vulnerabilities/{workout_id}')
    return render_template(page_template, sample_systems=sample_systems, workout_level=workout_level)


@vulnerability_defender.route('/get-vulnerabilities/<workout_id>', methods=['GET', 'POST'])
def get_vulnerabilities(workout_id):
    workout = ds_client.get(ds_client.key('cybergym-workout', workout_id))
    if not workout:
        return render_template('invalid_workout.html')
    level = "1"
    if request.method == 'POST':
        if request.form['action'] == 'next':
            cve_id = request.form['cve_id']
            vulnerability_impact = request.form['vulnerability-impact']
            impact_rationale = request.form['impact-rationale'] if 'impact-rationale' in request.form else None
            assessment = assess_response(workout['assessment']['response'],
                                      workout['assessment']['response']['vulnerabilities'][cve_id],
                                      vulnerability_impact)
            workout['assessment']['response']['vulnerabilities'][cve_id]['response'] = vulnerability_impact
            workout['assessment']['response']['vulnerabilities'][cve_id]['rationale'] = impact_rationale
            workout['assessment']['response']['vulnerabilities'][cve_id]['correct'] = assessment['correct']
            workout['assessment']['response']['vulnerabilities'][cve_id]['correct_answer'] = assessment['correct_answer']
            workout['assessment']['response']['points'] += assessment['points']
            if LEVEL1_POINTS <= workout['assessment']['response']['points'] < LEVEL2_POINTS:
                level = "2"
                workout['assessment']['questions'][0]['complete'] = True
            elif workout['assessment']['response']['points'] >= LEVEL2_POINTS:
                workout['assessment']['questions'][1]['complete'] = True
                workout['assessment']['response']['complete'] = True
                data = workout['assessment']['response']
                page_template = 'complete.html'
                ds_client.put(workout)
                return render_template(page_template, data=data)
            ds_client.put(workout)
        elif request.form['action'] == 'startover':
            del workout['assessment']['response']
            ds_client.put(workout)
            page_template = 'risk-workout.html'
            return redirect(f'/app/{workout_id}')
        elif request.form['action'] == 'complete':
            return redirect(f'/app/complete/{workout_id}')

    random_vuln = get_vulnerability(workout_id)
    data = {
        'level': level,
        'score_img': get_score_image(workout['assessment']['response']['points']),
        'score': workout['assessment']['response']['points'],
        'company': workout['assessment']['response']['company'],
        'mission': workout['assessment']['response']['mission'],
        'system': workout['assessment']['response']['system'],
        'service_impact': workout['assessment']['response']['service_impact'],
        'mission_confidentiality': workout['assessment']['response']['confidentiality_impact'],
        'mission_integrity': workout['assessment']['response']['integrity_impact'],
        'mission_availability': workout['assessment']['response']['availability_impact'],
        'asset': random_vuln['asset'],
        'cve_id': random_vuln['cve_id'],
        'description': random_vuln['description'],
        'attack_vector': random_vuln['attack_vector'],
        'complexity': random_vuln['complexity'],
        'priv': random_vuln['priv'],
        'v_confidentiality': random_vuln['confidentiality'],
        'v_integrity': random_vuln['integrity'],
        'v_availability': random_vuln['availability']
    }
    workout['assessment']['response']['vulnerabilities'][random_vuln['cve_id']] = {
                'asset': random_vuln['asset'],
                'description': random_vuln['description'],
                'attack_vector': random_vuln['attack_vector'],
                'complexity': random_vuln['complexity'],
                'priv': random_vuln['priv'],
                'v_confidentiality': random_vuln['confidentiality'],
                'v_integrity': random_vuln['integrity'],
                'v_availability': random_vuln['availability']
    }
    ds_client.put(workout)

    page_template = 'get-vulnerability.html'
    return render_template(page_template, data=data)


@vulnerability_defender.route('/complete/<workout_id>', methods=['GET', 'POST'])
def complete(workout_id):
    workout = ds_client.get(ds_client.key('cybergym-workout', workout_id))
    data = workout['assessment']['response']
    for cve in list(data['vulnerabilities'].items()):
        key = cve[0]
        if 'response' not in data['vulnerabilities'][key]:
            del data['vulnerabilities'][key]
    if request.method == 'POST':
        if request.form['action'] == 'startover':
            del workout['assessment']['response']
            ds_client.put(workout)
            page_template = 'risk-workout.html'
            return redirect(f'/app/{workout_id}')
    page_template = 'complete.html'
    return render_template(page_template, data=data)
