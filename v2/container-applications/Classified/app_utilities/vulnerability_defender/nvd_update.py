import gzip
import json
import urllib
from datetime import datetime
from app_utilities.gcp.cloud_env import CloudEnv


class NVDUpdate:
    def __init__(self, env_dict=None):
        self.table_name = 'nvd_data'
        self.env = CloudEnv(env_dict) if env_dict else CloudEnv()

    def test_and_create_nvd_table(self):
        """
            cve_id varchar(255) primary key,
            vendor varchar(255),
            product varchar(255),
            attack_vector varchar(255),
            complexity varchar(255),
            priv varchar(255),
            ui varchar(255),
            confidentiality varchar(255),
            integrity varchar(255),
            availability varchar(255),
            description varchar(1024))
        """
        return True

    def update_table(self):
        setup_required = self.test_and_create_nvd_table()
        if setup_required:
            today = datetime.today()
            url = f"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{today.year}.json.gz"
        else:
            url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz"
        local_filename = urllib.request.urlretrieve(url)
        json_feed = json.loads(gzip.open(local_filename[0]).read())
        for cve in json_feed['CVE_Items']:
            try:
                if len(cve['configurations']['nodes']) > 0:
                    if len(cve['configurations']['nodes'][0]['cpe_match']) > 0:
                        cpe = cve['configurations']['nodes'][0]['cpe_match'][0]
                        cpe_parts = cpe['cpe23Uri'].split(':')
                        cpe_vendor = cpe_parts[3]
                        cpe_product = cpe_parts[4]
                        cve_id = cve["cve"]["CVE_data_meta"]["ID"]
                        cwe = cve['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']
                        cvss = cve["impact"]["baseMetricV3"]["cvssV3"]
                        attack_vector = cvss["attackVector"]
                        complexity = cvss["attackComplexity"]
                        priv = cvss["privilegesRequired"]
                        ui = cvss["userInteraction"]
                        confidentiality = cvss["confidentialityImpact"]
                        integrity = cvss["integrityImpact"]
                        availability = cvss["availabilityImpact"]
                        # TODO: This line escapes code input
                        vuln_description = dbcon.escape(cve["cve"]["description"]["description_data"][0]["value"])

                        vuln_args = (
                        cve_id, cpe_vendor, cpe_product, attack_vector, complexity, priv, ui, confidentiality,
                        integrity, availability, vuln_description)
                        # TODO: Insert into table
            except KeyError:
                pass