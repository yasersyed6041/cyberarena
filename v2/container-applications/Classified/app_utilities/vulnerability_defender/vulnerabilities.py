from random import randrange

from app_utilities.gcp.datastore_manager import DataStoreManager
from app_utilities.globals import DatastoreKeyTypes


class Vulnerabilities:
    LEVEL1_POINTS = 15
    LEVEL2_POINTS = 30
    vulnerable_assets = [
        {'name': 'Network Switch', 'vendor': 'cisco', 'product': 'ios'},
        {'name': 'CEO Workstation', 'vendor': 'google', 'product': 'chrome'},
        {'name': 'Phone', 'vendor': 'google', 'product': 'android'},
        {'name': 'Web Server', 'vendor': 'apache', 'product': 'tomcat'},
        {'name': 'Email Server', 'vendor': 'oracle', 'product': 'email_center'},
        {'name': 'SCADA System', 'vendor': 'microsoft', 'product': 'windows_10'},
        {'name': 'Database System', 'vendor': 'oracle', 'product': 'mysql'},
        {'name': 'SharePoint System', 'vendor': 'microsoft', 'product': 'sharepoint_enterprise_server'},
        {'name': 'HR Manager Workstation', 'vendor': 'apple', 'product': 'icloud'},
        {'name': 'Firewall', 'vendor': 'paloaltonetworks', 'product': 'pan-os'}
    ]

    def __init__(self):
        self.kind = DatastoreKeyTypes.NVD_DATA

    def get(self, build_id):
        """
        Selects a vulnerability from the NVD database at random for a specified workout
        :param build_id: Used for tracking the selected vulnerability
        :returns: Data structure containing the vulnerability database fields from the NVD
        """
        tries = 0
        while tries < 100:
            try:
                asset_index = randrange(len(self.vulnerable_assets) - 1)
                vuln_args = (
                    self.vulnerable_assets[asset_index]['vendor'],
                    self.vulnerable_assets[asset_index]['product']
                )
                filters = [
                    ('vendor', '=', vuln_args[0]),
                    ('product', '=', vuln_args[1])
                ]
                vulnerabilities = DataStoreManager(key_type=self.kind).query(filters=filters)
                vuln_idx = randrange(len(vulnerabilities) - 1)
                vuln = vulnerabilities[vuln_idx]
                vuln['asset'] = self.vulnerable_assets[asset_index]['name']
                return vuln
            except Exception:
                pass
            tries += 1
        return None

    def assess_response(self, organization, vulnerability, response):
        """
        :param organization
        :param vulnerability
        :param response
        :returns:
        """
        impact_ordering = {'NONE': 0, 'LOW': 1, 'HIGH': 2}
        reverse_ordering = ['NONE', 'LOW', 'HIGH']

        confidentiality = min(impact_ordering[organization['service_impact']],
                              impact_ordering[organization['confidentiality_impact']],
                              impact_ordering[vulnerability['v_confidentiality']])
        integrity = min(impact_ordering[organization['service_impact']],
                        impact_ordering[organization['integrity_impact']],
                        impact_ordering[vulnerability['v_integrity']])
        availability = min(impact_ordering[organization['service_impact']],
                           impact_ordering[organization['availability_impact']],
                           impact_ordering[vulnerability['v_availability']])

        correct_answer = max(confidentiality, integrity, availability)
        response = impact_ordering[response]
        test = correct_answer == response
        if test:
            points = correct_answer + 1
        else:
            points = 0 - (correct_answer + 1)

        return {
            'correct': test,
            'correct_answer': reverse_ordering[correct_answer],
            'points': points
        }

    def get_score_image(self, score):
        """
        Returns the image to display based on the given score
        """
        score_img_prefix = "imgs/trojan"
        if score <= 0 - self.LEVEL1_POINTS:
            img_num = 0
        elif score < -5:
            img_num = 1
        elif score < 5:
            img_num = 2
        elif score < self.LEVEL1_POINTS:
            img_num = 3
        else:
            img_num = 4

        return f"{score_img_prefix}-{img_num}.png"

    @staticmethod
    def get_assessment(workout):
        """Returns either assessment or lms_quiz object"""
        if assessment := workout.get('assessment', None):
            return assessment
        elif lms_quiz := workout.get('lms_quiz', None):
            return lms_quiz
        else:
            return False
